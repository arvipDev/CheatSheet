

https://www.redhat.com/en/services/training/rh024-red-hat-linux-technical-overview

arn:aws:iam::689842674254:user/arvind

689842674254

IAM ----------------------------------------------------------------------------------------------

IAM - Identity and Access Management contains
They are globally scoped and they provide security. (S3 is also globally scoped)

Users - Mimics an actual person.
Groups - Bunch of users with similar characteristics. 
Roles - Are applied to users/groups and AWS services.
Policies - Written in JSON are applied to users, groups and roles to specify what they can and can not do. 

EC2 ----------------------------------------------------------------------------------------------

Region - multiple AZs upto - F
Every region has atleast 2 AZs upto 6 usually 3 AZs

AZ - Availabilty Zone containing separated data centres
No AZs within a region or among regions share data centres 

EC2 inatance - it is a virtual machine and in the EC2 section of the console, we can find
1) EBS - Elastic block storage - virtual machine
2) ELB - Elastic load balancer - virtual drive
3) ASG - Auto Scaling Group
4) Network and security - Secutity Groups, etc
5) Others - EIP (Elastic IP), ENI (Elastic Network Interface)

EC2 Instance COnnect can be used to connect to AWS instance from a browser in any OS.

AMI - AWS Machine Image -------------------------------------------------------------------------
This is sort of a custom template used to create instances that has the required bootstrap.
AMIs are AZ specific.

Launching --------------------------------------------------------------------------------------- 
Create a security group with a set of rules as desired. SSH / HTTP. SSH - port 22 by default. 
Assign a key pair to the instance while creating it. Also download that key pair. (.pem file)

To access the instance through cmd - use ssh. 
navigate to the .pem location and change the access to the file using
************************************** Important *************************************************
chmod 0400 nameOfTheKey.pem - This will change the permissions on linux and macOS. 
On windows, use properties.
**************************************************************************************************

To access the instance through browser - apache server must be installed on the VM/instance. 
use cmd - 
1) Go to the root of the instance - sudo su
2) Install updates : yum update -y
3) Install http on the server: yum install -y httpd.x86_64
4) start the http service: systemctl start httpd.service
5) enable the http service: systemctl enable httpd.service

Now use the public key of the instance to access it from the browser. 
ssh -i publicKey.pem ec2-user@ec2PublicIP

--------------------------------------------------------------------------------------------------------------
Security Group - 
Provides traffic access rights to an instance/VM, like a firewall.
They are region specific. 
An instance can have multiple SG upto 5 by default and upto 16 on request.
A SG can be assigned to multiple instances. 
Preferrably have a seperate SG for SSH.
By default - all inbount traffic is blocked and all outgoing traffic is allowed
"Connection refused" error is related to instance
Timeout error is related to security group or firewall.
Security group to Instance - Many to Many relationship

Multiple security groups can be associated with an instance while creating the instance or at Network Interface after the creation of the 
instance. 

Private IP VS Public IP ----------------------------------------------------------------------------
public IPs are always unique and accessable to the internet. They can be geolocated. 
private IPs are networking in a private network. Only specific range of IPs can be used.
They can only conntect to the internet using NAT Gateway/instance + Internet Gateway. 
They are unique within a network but can have the same IP on another network. 

Elastic IP -----------------------------------------------------------------------------------------
They are used in place of public IPs which change when an instance is restarted. 
1 EIP can be assigned to 1 isntance at a time.
Max 5 EIP can be issued, can request amazon for more EIP.
Avoid using EIP

EC2 User Data --------------------------------------------------------------------------------------
This is used to bootstrap the instance with code. It is inserted while creating the instance.
The code should start with - #!/bin/bash
User data runs with root user. It runs only once at start up of the instance.

Instance Launch Types ------------------------------------------------------------------------------
1) On Demand
2) Reserved
	a) Reserved b) Convertable c) Scheduled
3) Spot
4) Dedicated Instance
5) Dedicated Host - for hosting licensed products

Best Combo - Reserved instance for main - spot/on demand instance for peak loads.
Remember the hotel example.

Instance Types - FightDr.McPx
F - Field Programming Gate Array
I - IOPS
G - Graphics
H - High Disk Throughput
T - Cheap general purpose
D - Density
R - RAM 
M - Main choice for general purpose apps
C - Compute
P - Graphics GPU
X - Extreme memory

T2/T3 Burstable Instance - Busts during heavy load and utilizes burst credits. Accumulate burst credits during normal load.
T2 Unlimited - can burst above the available burst credits.


ENI - Elastic Network Interface --------------------------------------------------------------------------------------
They provide private IPs that can be associated to and disassociated with an instance.
Bound to an AZ
Can be moved from one instance to another.
1 primary private IPv4, 1 or more private secondary IPv4, 1 EIP per private IPv4
1 public IPv4, MAC address, 
1 or more security groups, 1 or more IPv6
source/destination check flag

AMI - Amazon Machine Image -------------------------------------------------------------------------------------------
We can customize a template to create same instances. And EC2 User data can be used to add pre-reqs/bootstrap code
They are region specific.

###############################################################################################################################################################

Scalability and Availability -----------------------------------------------------------------------------------------
Scalability is the ability to add/remove instance to tackle the load.
Types - Vertical and Horizontal scalability.
Verrtical Scalability - increasing the size (adding/removing computing ability/storage to an instance)
They have a limitation on scaling. 
They are applicable to non-distributed systems. 
RDS, ElacticCache scale vertically.
exaple - for t2.micro to t2.large

Horizontal Scalability  - increase in number (adding/removing instances)
They can be applicable to both distributed and non-distributed systems.
They do not have limit on scaling
example - ELB, EBS

Availablility is the ability to be respond to requests at all times. 
High horizontal scalability facilitates high availability. 
example - ELB, EBS

Elastic Load Balancing -----------------------------------------------------------------------------------------
They are used to balance the traffic by assigning client requests to a bunch of servers/instances. 
They provide single end point access to the server - DNS 
They provide SSL termination.
They prevent service interuption due to bad server/instance state.
They perform health checks.
High availability. Stickiness and cookie service.

Health checks are performed on ports and routes.

Types of LB ----------------------------------------
Classic LB - CLB
Application LB - ALB
Network LB - NLB
Load Balancers can be an internal (private) or an external (public) load balancer. Must specify atleast AZs

Security Group of LB must communicate with SG of instance to facilitate SSL termination.
In such a case, SG of instance inbound rule will listen to SG of LB. 
HTTP errors - 
500 - server error
400 - client error
300 - unavailable
200 - success

503 Service Temporarily Unavailable - When instance/server is not up and running
Timeout errors are associated with security groups and their inbound outbound traffic rules

Monitor ELB using Access logs and CloudWatch Metrics

Classic LB -----------------------------------------------------------------------------------------------------------
Exposes static DNS
Layer 4 and 7. No target group is used in CLB. Hence redirect based on hostname, path and query in the header is not supported.
Old load balancer. Can choose between cross AZ load balancing and same AZ load balancing.
It has an option to migrate to ALB in the console. 

Application LB -------------------------------------------------------------------------------------------------------
Exposes static DNS
Layer 7. Redirect traffic based on hostname, path and query in the header. This can be setup
by adding rules to listeners in the ALB. These rules can be used to redirect traffic based on path, hostname, 
query string, IP, etc to a specific Target Group (group of instances or ECS tasks or lambda). 

They can redirect to multiple applications across multiple machines.
They can redirect to multiple applications on same machine. Docker and ECS.
They are best suited for micro-services and container based applications (docker, ECS). 
They exhibit port mapping. can redirect to multiple target groups.
They can redirect from http to https.
Health checks are at target group level.

X-Forwarded-For - Client's IP
X-Forwarded-Port - Port details
X-Forwarded-Proto - Protocal details. These are inserted in the link sent from LB to the server/instance.

Network LB -----------------------------------------------------------------------------------------------------------
Exposes static IP
Layer 4. 4 times faster than ALB.
They have one static IP per AZ and support EIP.
They are used for high performance tasks. Not included in AWS Free tier.
Target group can either be group of EC2 instance or IP (private IP). Lambda is not allowed here.

---------------------------------------------------------------------------------------------------------------------------------------------
NOTE - ALB shows "OutOfService" error on the instance because there is no access to instance through http (public access). 
Security group inbount traffic must consist of http rule.

Load Balancers must specify AZs that it would route the traffic to. If an AZ is not mentioned and an instance belonging to that AZ is added to it,
traffic will not be routed to that instance. It would say - "Target is in an availability zone that is not enabled for the load balancer".
This could be used as an hack to have load balancer with instances from multiple AZs without traffic being diverted to them.

There is a feature to migrate LB type from classic to ALB.
Target Groups - They are groups of EC2 instances or ECS Tasks or Lambda functions or IP addresses (Private IPs).

Load Balancing Algorithms - https://www.youtube.com/watch?v=iqOTT7_7qXY
AWS provides 2 options 
1) Round Robin - Best when all instances are of same capacity and all client requests require similar computational requirement (process time)
2) Least Outstanding Requests - Best when client requests differ in computational requirement (varying processing time)
---------------------------------------------------------------------------------------------------------------------------------------------

Load balancing stickiness -----------------------------------------------
Supported by CLB and ALB, they redirects a specefic client to the same server/instance so that the session continuity is maintained.
Using this is not ideal as it causes imbalance in LB

Cross-Zone load balancing -----------------------------------------------
for CLB - disabled by default and free
for ALB - always enabled and free
for NLB - disabled by default and pay for usage.

SSL Certificates are used by the load balancer (HTTPS Listner) to support https requests.
Multiple SSL Certificates are required for multiple domains.
LBs use X.509 ceritficate. ACM - AWS Certificate Manager, IAM and an external SSL certificate can be uploaded to the HTTPS Listners of LB.

SNI - Server Name Identifier --------------------------------------------
SNIs are used by the load balacer to map domain names to their respective SSL certificates. 
The Client send the host name with its request during the initial handshake and SNI fetches the appropriate SSL certificate belonging to the domain to the LB
SNI is available only for ALB and NLB. 

ELB Connection Draining (CLB) or Deregistering Delay (ALB, NLB) -------------------------------------------------
An in-flight request must be fultilled to rended an instance/server inactive, during this perios no new requests are redirected to this instance/server.
By default, ALB waits for 300 seconds and the range is between 1 - 3600 seconds.

ASG - Auto Scaling Group ------------------------------------------------
It uses Launch Configuration or Launch Template(newly added).
It is used to scale in or scale out based on the defined scaling policies. 
New instances are registed to scale in. 
CloudWatch can be assigned to trigger alarm or to scale in/scale out
Criteria for scaling - CPU usage, traffic, Average network in/out.
Custom metrics can be set using CloudWatch.

Launch Configuration and Launch Template(latest)

Policies - Scale-in policy is used to define when to removed/de-register existing instances.
Scale-out policy is used to define when to add/register new instances.

Target tracking Scaling - CPU usage target, No of requests, average network in/out.
Simple/Step Scaling - Based on alarm triggered by CloudWatch.
Scheduled Action - Schedule for scaling at a specific time.

Scaling Cool Down -------------------------------------------------------
During cooldown period, scale-in and scle-out is paused/ignored. Because, during this period a scale-in or scale-down is already in process.

###############################################################################################################################################################

EBS - Elastic Block Storage ---------------------------------------------
Thia ia a Virtual Network Drive. It is used to prevent data loss due to instance failures. 
When an instance is rebooted/terminated, the data is persistant if EBS is used.
They are AZ specefic, can be detached from one instance and attached to another within the same AZ. 
Pay for the entired provisioned space
An instance can be attached to one or more EBS volumes but an EBS volume can have only one instance attached to it at a time.
A snapshot must be taken to attach the EBS to an instance in another AZ.


EBS Types ---------------------------------------------------------------
GP2 - SSD, General Purpose Boot volume. Development and testing, virtual desktops, etc.
1GB - 16TB, 3 IOPS per GB and upto 16000 IOPS. IOPS bursts upto 3000 IOPS
Can not increase IOPS independently, it is directly dependent on storage size
IOPS increases till 5334 GB storage and reaches max at 5334

IO1 - SSD, IOPS purpose boot volume for high IOPS requirements. Large databases.
4GB - 16TB, IOPS to GB ratio is 50:1, 100 IOPS - 32000 IOPS or 64000 IOPS for Nitro instance. 
Can increase IOPS independently within the permitted ration of 50:1.

ST1 - HDD, non boot volume, for high throughputs, low price. Big data warehouse, etc.
500GB - 16TB, throughputs of 500, max IOPS - 500

SC1 - HDD, non boot volume, for highest throughputs, large volume infrequently accessed data.
500GB - 16TB, throughputs of 250, max IOPS - 250, has burst capability.

To restore EBS from an instance in one zone to another, take a screenshot and create an EBS using 
the screenshot in that perticular AZ and assign the EBS to the instance. 
It is wise to not performe the above actions during high traffic.

Instance Storage --------------------------------------------------------
Physically present on the instance. Fasters IOPS possible since the data doesnot travel through a network.
Data is lost on stop or termination of instance but data is not lost on reboot. 
Instance can not increase in size. They can be mounted on a file system.
NOTE - Instance storage is not available for all the instances and they are named ephimeral0

EFS - Elastic File System -----------------------------------------------
It is Network File System NFS. It can be used on LINUX OS only.
This is cross AZ and can be mounted on multiple instances. Costly (3x EBS) but pay per usage.
High throughput of 10 Gbps. Size grows automatically to Petabytes.
Storage types -
1) EFS-IA storage class - EFS infrequent access: this is used to move that data from EFS if the data is infrequently accessed to save money. 
2) Standard storage which is more expensive and frequently accessed.
Performance mode - 1) General Purpose 2) Max IO
Throughput mode - 1) Bursting 2) Provisioned

EFS Setup Steps------------------------------------------------------------
launch multiple EC2 instances in different AZs, If EFS is available, then there is an option to associated it with the instance while launching.
Create an EFS, its security group must have an inbound rule that listens to the security group/s of the EC2 instances to be associated with it. 
amazon-efs-utils must be installed on all the ec2 instances to be associated with the file system. 
Use the command - sudo yum -y install amazon-efs-utils.
Mounting EFS on ec2 instances.
Use the command - sudo mount -t efs -o tls fs-1d1e8ccc:/ efs.
After mounting the file system on all the EC2 instances, it will be accessable from all the associated instances.

###############################################################################################################################################################

RDS - Relational Database Service ------------------------------------------------------------------
Database managed by AWS: MOMPAM
M - MySQL
O - Oracle
M - Microsoft SQL Server
P - Postgres
A - Aurora (By AWS)
M - MariaDB

NOTE - RDS Read Replicas and Multi AZs are very important for exam

Options of having DB on AWS -
1) RDS - AWS manages most things
2) Deploy DB on EC2 instance - Developer must manage everything.

RDS advantages over DB deployed on EC2--------------------------------------------------------------
It is managed by AWS.
OS patches, and maintenance windows for updates.
Automated Backup and restore to any previous available versions.
Disaster management using Multi AZ.
Scalability and availability.
Monitoring provisions. 
Read-Replicas for improved performances.
Storage using SSD - GP2 and IO1.

Can not SSH to RDS.

RDS Features ---------------------------------------------------------------------------------------
RDS Automatic Backup
Read Replicas
Multi AZ
RDS Security.

RDS Automatic Backup -------------------------------------------------------------------------------
Automatic daily backup. Default backup retention of 7 days, expandable upto 35 days.
Transaction log backup for every 5 min. Most recent restore possible is for 5 min
Daily backup is performed during maintenance window.

Snapshots ------------------------------------------------------------------------------------------
Manual backup. Can be performed at any instance and can retain the snapshot for as long as required.
All Encrypted RDS give out encrypted snapshots.
Un-encrypted RDS give un-encrypted snapshots.
Un-encrypted RDS can be encrypted by taking a snapshot, copying a snapshot and enabling encryption and 
restoring the snapshot to an instance.
Snapshot restoration within the same AZ is free but not for cross AZ restoration as it has some
netrowk charges since the data is transfered over the network.

Read Replicas --------------------------------------------------------------------------------------
They are replicas of a DB, can perform only SELECT operation on them.
They can not be overwritten. They are Asynchronous and are eventually consistent.
Upto 5 RR are allowed. 
In the backend, Read Replicas are created using snapshots.
They are useful to perform analytics on the DB.
There is a cost to move RR across AZs and free within the same AZ.
RR is encrypted only if the master RDS is encrypted.

Multi AZ -------------------------------------------------------------------------------------------
They have a single DNS and used for diaster recovery.
They has automatic and fast fallover incase of failure of the main RDS.
The data is synchronous and consistent.
RDS Multi AZ standby DB can not be read when the main DB is functional.
Read Replicas can also be used as backup.
Increases availability.

RDS Security ---------------------------------------------------------------------------------------
1) at rest encryption - Uses AWS KMS - AES-256 encryption. They must be opted for when creating the RDS.
TDE - Transparent Data Encryption is available for Microsoft SQL Server and Oracle.
If RDS is not encrypted, their Read-Replicas are not encrypted.

2) in-flight encryption - Using SSL certification. 
PostgreSQL uses parameter group and MySQL uses an SQL command.

Unencrypted RDS provides Unencrypted snapshots. 
To migrate from unencrypted RDS to encrypted RDS -
1) Take a snapshot (it is not encrypted)
2) Copy the snapshot and enable encryption on it.
3) Use the encrypted snapshot to restore the DB.
4) Migrate the application to the new DB and delete the older DB

Network Security is provided through Security Group and depploying RDS in a private subnet.
Access management is using IAM policies. Username and pwd is used to login to the DB. 
IAM based authentication for PostgreSQL and MySQL.

IAM Authentication ---------------------------------------------------------------------------------
Provides authentication token through "RDS Services" to MySQL and PostgreSQL DB.
Auth token is alive for 15 min. Auth token travels through SSL

Aurora ---------------------------------------------------------------------------------------------
They are PostgreSQL and MySQL comptible. It is 5x faster than MySQL and 3x faster than PostgreSQL.
Automatically scales. Shared volume (EBS) expands 10GB at a time to 64TB.
Failover is immediate within 30 sec.
Upto 15 Read Replicas.
It has 6 copies of data spread across AZs for disaster management and availability. 
4 copies are needed for write operation and 3 copies are need for read operation.
Supports cross region replication.

Security -------------------------------------------------------------------------------------------
Aurora seciroty is same as RDS. In-flight and at-rest encryption using SSL Certificates and KMS respectively.
User's responsibility to secure EC2 instances with security group. 
IAM Authentication exists the same as EDS.
All read replicas, snapshots and auto backups are encrypted.

Aurora Serverless ----------------------------------------------------------------------------------
No need to worry about configuring instances. AWS does it for us.
Automatic instantiation of instances, scale-in, scale-out and termination is taken care of by AWS.
Pay per use. Cost-efficient. 
Best for infrequent, intermittent and unpredictable work load.

Global Aurora --------------------------------------------------------------------------------------
The are region based and has 1 primary region allowing read and write, upto 5 secondary regions 
allowing only reads and 15 Read Replicas per region.
They are available across regions. High Availability and provides backup of data.

ElasticCache ---------------------------------------------------------------------------------------
They are the RDS for caching. They have write, read scaling and multi AZ
Low latency and high performance.
Used for caching data based on requirements. 
Types - Memcached and Redis.

Redis ----------------------------------------------------------------------------------------------
Similar to RDS. It is multi AZ. Consistant data with backup and failover.
Read Replicas for high availability and scalability. 
Data is persistant

Memcached ------------------------------------------------------------------------------------------
Inconsistent data with no backup and no failovers.
Sharding - Partitioning of drives.
Multi-Threaded architecture.
Does not support Read Replicas.

Lazy loading/Lazy population/Cache-Aside and Write-Through ---------------------------------------------------------------------
Lazy loading is read optimization and write-through is write optimization.
lazy loading - check if the data exists in cache. If not, fetch it from main memory and leave a copy in cache.
Write-Through - check if the data exists in cache. If not write the data in main memory and in cache.
Both of them are used in combination for better performance. 

Cache Evictions and TTL - Time To Live -------------------------------------------------------------
Cache Eviction - when the data in the cache gets removed based on various factors.
TTL - a specific value of time is set to a data after which it gets removed from cache.
TTL is not a bad idea usually. But in case of Write-Through, need to be very careful.
Cache eviction can occur if the data is explicitly removed from cache, if the cache is full and the 
LRU data is removed or TTL is up and data gets removed from cache.

###############################################################################################################################################################

Route 53 -------------------------------------------------------------------------------------------
Route 53 iS a managed DNS (Domain Name System). It is set of records and rule that helps clients to get routed to the right server.
Supports both public DNS and private DNS.
Common records are -
A - Hostname to an IPv4
AAAA - Hostname to an IPv6
CNAME - Hostname to Hostname
Alias - Hostname to an AWS Resource

cmd: nslookup domainName - to get IP address of domain

Working - A client sends a DNS request containing hostname to a route 53,
Route 53 gets the mapping IP address of the server and repsponds to the client.
The client then used the IP address to communicate with the server.

Route 53 supports: Load balancing, health checks and routing policies.
TTL - Time To Live is assigned to each route 53 response so that the IP is cached at the client for a specific
period of time as mentioned by the TTL.
Longer TTL might render IP obsolete or inconsistent but reduces load on Route 53(DNS).
Shorter TTL will increase the load on Route 53 but might lessen the chances of inconsistency. 

CNAME - servers all the client's DNS requests except the Root Domain.
Alias - serves all the client's DNS requests. They are free and provide native health checks.

Types of routing policies: --------------------------------------------------------------------------
1) Simple RP - Used when a hostname is mapped to a resource, if multiple values are returned, random one is selected by client. No health checks.
2) Weighted RP - Controlling traffic to an end point in terms of percentage. Health checks are allowed
3) Latency RP - Divert traffic to the least latency region. (Nearest region) Records automatically detects the region of the IP entered.
4) Failover RP - Consists of primary and secondary records. Primary record is for the main end point and it must have an associated health check
and secondry is for backup end point, for when the health check of the primary record fails. 
5) Geolocation RP - Routing based on client's location. Example - all traffic from Asia gets routed to Mumbai region.
Client's traffic is identified based on their country/continent. So all traffic from a perticular country/continent 
are diverted to a specific endpoint. 
6) MultiValue RP - Ability to have multiple records with same path that gets diverted to multiple end-points. The client chooses which end point to pick.
Automatically fails over to the available end-point.

NOTE - Does not work for Alias and CNAME.
Routing to ELB should be through "A" type and using Alias only.

Health Checks can be performed on the end points to check if they are healthy or not and based on that the routing take place
DNS Records Information - https://www.ionos.com/digitalguide/hosting/technical-matters/dns-records/

###############################################################################################################################################################

VPC - Virtual Private Cloud ------------------------------------------------------------------------
1-3 questions in exam
VPC is a private network in the cloud that is regionally scoped. 
A VPC can belong to only one region. All default VPCs have a single CIDR (range of IP addresses).
Subnets are part of VPC, They are AZ specific. They represent network partition of the VPC.
There are 2 types of subnets 
1) Private subnet - Private subnets are not accessable from the internet
2) Public subnet - They are accessable from the internet. 

To define access between subnets or to the internet, Route Table is used.
Route table contains rules that routes to gateways or subnets. 
Hierarchy - AWS Cloud - Region/VPC - AZ/Subnets
Internet Gateway - They are used to connect VPC to the internet.
NAT Gateway - They are managed by AWS and they are used to connect the instances in the private subnet to the internet through the Internet Gateway.
NAT Instance - Same as NAT Gateway but they are managed by the user.
NAT gateway/instance is in public subnet but they are used to allow internet access to private subnet. 
Internet gateway is outside subnets within the VPC.

Security -------------------------------------------------------------------------------------------
NACL - Network Access Control List is a layer of security provided at the subnet level, it sits on top of security groups. 
The default VPS provided by AWS has a default modifiable NACL which allows all inbound and outbound traffics.

They operate at subnet level.
They can allow and deny IPs from accessing the subnet
They are stateless and evaluates rules in an order to decide traffic access.

Security groups are at an instance level and they form the second level of security that sits below NACL.
All traffic allowed by NACL is evaluated by security group and only those that are allowed by security group
reaches the EC2 instance.

They operate at instance level.
They can only have allow rules set to IPs.
They are stateful and evaulates all the rules before deciding about traffic access.

VPS Flow Logs --------------------------------------------------------------------------------------
They are used to debug connectivity issues. They also log AWS managed interfaces such as load balancer, RDS, ElasticCache, etc. 
They log internet to subnet, subnet to subnet and subnet to internet connectivity issues.
1) VPC flow logs
2) Subnet flow logs
3) Elastic network interface flow logs

VPC Peering ----------------------------------------------------------------------------------------
They are used to establish private connection between 2 VPCs.
They are not transitive. Each VPC must be connected to another to communicate with it.
All default VPCs have a single CIDR (range of IP addresses). Must not have overlapping CIDR (Classless inter-domain routing).

VPC Endpoint ---------------------------------------------------------------------------------------
They are used to connect private subnets to the AWS resources through a private network.
NOTE - All resources are connected publically by default. VPC Endpoints provides a private access to the AWS resources.
It can be used only within the VPC, hence the scope is limited to private subnets only.
1) VPC Endpoint gateway - Is used to connect subnet to S3/DynamoDB
2) VPC Endpoint Instance (ENI) - Is used to connect subnet to all other resources.

Site-to-Site VPN and Direct Connect ----------------------------------------------------------------
Site-to-Site VPN is used to connect on-premises data centre to AWS VPC using public network (internet).
They are encrypted automatically.

Direct Connect (DX) is used to connect on-premises data centre to an AWS VPC using a physical connection.
Takes longer to establish connection for the first time. 
They are fast, secure and uses a private network.

NOTE - Both site-to-site VPN and Direct Connect can not access VPC Endpoints.
Hence, it can not access AWS resources. ENI - VPC Endpoint Instance.

3-Tier architecture - public subnet -> private subnet -> Data subnet.

LAMP Stack - 
Linux, Apache, MySQL(RDS), PHP.


###############################################################################################################################################################

S3 -------------------------------------------------------------------------------------------------
There are a very important resource. Important from Exam point of view also.
They consists of Buckets (Directories) and Objects (Files). There is no concept of directories in S3
Buckets are region specific but globally scoped and their names are globally unique. 
S3 is infinitely scalable resource.
Objects have keys. Keys are prefix + Object name.
Maximum object size is 5TB and they are uploaded in max chunks of 5GB - multi part upload
They have Metadata, Tags and Version ID 
Versioning is enabled at the bucket level. Can be done at any point of time.
Versioning helps in roll backs and helps during unintended deletion. 
Previously unversioned objects buckets will have null against there version before enabling versioning.
If versioning is disabled, versions will not be deleted. 

NOTE - If "block all public access" is enabled, only presigned URLs to objects through right click - open is allowed
The file's URL will throw a 403 access denied error.

Types of Encryption --------------------------------------------------------------------------------
1) Server Side Encryption SSE-S3 - The AWS S3 encryption will take care of the encryption at the server side.
AES256 encryption is used. Client Http/s requests must include the header - "x-amz-server-side-encryption":"AES256"
2) SSE-KMS - Amazon Key Management Service will take care of the encryption. Uses KMS.
Client Http/s requests must include the header - "x-amz-server-side-encryption":"aws:kms"
3) SSE-C - The client provides an encryption key to be used at the server side for encryption.
The key must be sent by the client through an HTTPS request on each instance. 
4) Client Side Encryption - Client takes care of encryption and the S3 just stores and retrieves the encrypted data.
Client takes care of decryption. May use AWS S3 Encryption Client.

SSE-C must always be an Https request from the client.
In-Flight encryption is also possible using SSL. 
Both Http and Https is supported but mostly Https is used. 

S3 Security ----------------------------------------------------------------------------------------
1) User based security - Using AMI polocies, API calls can be allowed or denied.
2) Bucket Policies - Using policy generator, we can create a JSON script to define bucket level policies to allow/deny access
3) OACL and BACL - Object level and bucket level access control policies.

Block Public Access is a feature added to prevent data leaks. If resides in the permissions tab and it is by default
turned on. If turned on, it will deny public access to the Buckets or Objects. It can also be turned on at the S3 level, by default it is off.

NOTE - Access is granted if AMI policies allows or Bucket policies allow and S3 does not explicitly deny access.
Good practise to leave "Block Public Access" on, it prevents data leaks.
But disable BPA for statis website. 403 error if bucket policy does not allow access to it. 
Explicit DENY in an IAM policy will take precedence over a bucket policy permission

CORS -----------------------------------------------------------------------------------------------
Cross Origin Resource Sharing. Allows making request from one website to another. 
This is a web browser based mechanism.
The second website must contain a CORS HEADER containing the necessary permissions.
Access-Control-Allow-Origin must provide the website link from which the requests are to be made. Can be * to allow all website.
Access-Control-Allow-Methods provides you the type of requests that can be made - GET, PUT, DELETE.
CORS permissions can be set in the Permissions tab -> CORS COnfiguration.

S3 Consistency -------------------------------------------------------------------------------------
Read after write for new objects.
Eventual consistency for updates and deletes.
put 200 -> put 200 -> get 200 (get the older put value)
delete 200 -> get 200 (get even after delete)
get 404 -> put 200 -> get 404 (possible)
There is no way of making S3 consistent. It is always eventually consistent.

###############################################################################################################################################################

AWS CLI, SDK, IAM roles and policies ---------------------------------------------------------------
* Download and install AWS CLI for windows - version 2
To check if the CLI is installed, in CMD type: aws --version. If the response is with a python version, then CLI is successfully installed.
Troubleshooting - If "aws: command not found" error occurs, then it is because the aws cli path is not present in environment variables PATH. 

AWS initial configuration --------------------------------------------------------------------------
cmd: aws configure
enter: AWS access key ID
enter: AWS secret access key
enter: Default region name: ap-south-1
enter: default object format: nothing

to get the absolute path of the .aws file
cmd: dir %UserProfile%\.aws 

to get content of config file in .aws folder
cmd: type (absolute path to .aws\config) 

to get content of credentials file in .aws folder
cmd: type (absolute path to .aws\credentials)

CLI on EC2 instance to manage S3 -------------------------------------------------------------------
Using cmd, login to EC2 instance.
Through EC2, access S3 buckets. For this, we need permission to access S3.
Insecure way - Permissions can be obtained by setting aws configure - which stores the credentials on the EC2 instance.
This should never ever be done. Instead, use IAM roles and policies to get access to S3 buckets.
Create an IAM Role by attaching a custom policy or aws managed policy.
Custom policies can be created using required API calls. There are about 231 API calls to S3 at the moment.
Attach the IAM Role to the EC2 instance and s3 will be available. Select instance, actions, instance settings, add/replace IAM role

EC2 Policy API call:
Write: RunInstances
S3 AWS Policy:
AmazonS3FullAccess
AmazonS3ReadOnlyAccess

ssh to instance, cmd: aws s3 ls - to get the list of buckets
cmd: aws s3 mb s3://bucketName - to create a bucket
cmd: aws s3 rb s3://existingBucketName - to remove a bucket

NOTE - Never use "aws configure" to set the credentials in ec2. Use IAM Roles and policies instead.
cmd: cat ~/.aws/config - to get the region and output format details.
Policy changes and updates in IAM Roles are eventually consistent.

inline Policies - These policies are specific to a role on top of existing policies in that role. It is not globally visible.
Usually, not a good practise to use inline policy.
Visual Editor - Generate Policy directly through UI in the IAM, create policy section. Sid - "VisualEditor0"
Policy Generator Tool - Generates a JSON script by manually entering the requirements in the UI. Sid - "stmts......."
AWS Policy Simulator - Used to test the policy and helps during debugging a role or the policy attached to it.
 
S3 CLI command reference - https://docs.aws.amazon.com/cli/latest/reference/s3/
IAM Policy Simulator for testing - https://policysim.aws.amazon.com/home/index.jsp

AWS dry run, sts decoder, instance metadata --------------------------------------------------------
STS Policy API call:
Write: GetSessionToken
Read: DecodeAuthorizationMessage

--------------------------------------------------------
Dry runs are used to simulate API calls using CLI. Few API calls are expensive and to check permissions, dry runs are used. 
Need to ssh into the instance to perform dry run.

cmd: aws ec2 run-instances --dry-run --image-id "ami" --instance-type t2.micro

ERROR: An error occurred (UnauthorizedOperation) when calling the RunInstances operation: You are not authorized to perform this operation. Encoded authorization failure message: ZoWBJZ8Yd6v_V-m8aB5_Iuxdt077drlwN_uPlQR6K9cT0Q6j9zn4NgPmN6Opk-I4dJzTQi-CVWDf7PWp2BLcDeY_c-HbPyf_2qlDuSvo3y1vfEjq6maHngoTfjo_WtFVd_786wcdj4Z73Sh0ctALGhJ6Ac5SKMR0gEyywtkfJKXKwyqd4gafCS4Z8pD6Osxhvh0-zRYwdsxuJEQMO-W5KQ9Mm2IKDAFkyy5CDzSAIg9OGc4UqQuoLNG-M4l4Lnbvc1Zc4Oyysa12PzLIcXR6ROsc36uRIFC1IAEW3HUsy7daYSe0Y7PHlkK4xRM8XjwsrFUrHSgRYZ_Wc3MeCN3r532enTPrbBwXP2m807W8DwxPfVXQ6zZgg7ABclI3EU11U0WB0qf9qbpVno3mRpvnPnjGiT5QaHZ_mjEHZn1xGLPOllaY8ETPepe0OHj-rL_R7MqG8R8J0Wa7ZjLoB3mjxxLrXozS_e8I9vz6mfI4P5aJHLWjowbeYbGfG_vJmeKroFtewqm0nkRGa2kGciAP3GkRPRc7SvGegILW2CpCRqVN4SlWkOR70YRxax6PPYgkGlWPQfraQYdJX-Xz25sA_VvHDPbBPngwEBYqHty0MfV9xZNhzQLTEUjgIm2maTQVP_Br8ECotKTgIeXKAwd6OI-2YQ5jNCiFkPKzZq_pNMtGU90cucQJh-BdNjSHxQ
This error occurs if the AMI Role does not have the required policy attached to it. In this case a custom policy that allows access to 
EC2 RunInstance is required.
ERROR: An error occurred (DryRunOperation) when calling the RunInstances operation: Request would have succeeded, but DryRun flag is set.
This is a successful test. 

--------------------------------------------------------
STS decoder is an STS API used to decode the encoded message (error messages).

cmd: aws sts decode-authorization-message --encoded-message "encodedMessage"

ERROR: An error occurred (AccessDenied) when calling the DecodeAuthorizationMessage operation: User: arn:aws:sts::689842674254:assumed-role/MyFirstEC2Role/i-0a60d4b9127bcb0f0 is not authorized to perform: sts:DecodeAuthorizationMessage
This error occurs if the AMI Role does not have the required policy attached to it. In this case a custom policy that allows access to 
STS DecodeAuthorizationMessage is required.

--------------------------------------------------------
Instance meta-data, need to be ssh'ed into the instance and use http://169.254.169.254
This is how IAM uses 169.254.169.254 to get meta-data about the instance in the background when we type "aws configure"

cmd: curl http://169.254.169.254/latest/meta-data/ to get the ec2 meta-data.

AWS CLI Profile, MFA, SDK  -------------------------------------------------------------------------

cmd: aws configure --profile "profilename" to create a profile and assign access key ID and security access key
Once a profile is created, it must be deleted from the config and credentials file inside the .aws folder.

cmd: aws sts get-session-token --serial-number "arn..." token-code "mfa code from google authentication"
Need to set an IAM policy before running the above command. 
We get - AccessKeyId, SecurityAccessKey, SessionToken and Expiration by running the above command.

NOTE: For using SDK, if region is not specified, by default, the region will be us-east-1.
SDK must be used for AWS resources like DynamoDB, etc.


DEBUGGING (MFA error not discussed in the course) ---------------------------------------------------
The default credentials belong user1 and I created MFA on the console for user2. 
I was trying to create a session for user2 on the CLI and got the following error:

"An error occurred (AccessDenied) when calling the GetSessionToken operation: 
MultiFactorAuthentication failed, unable to validate MFA code.  
Please verify your MFA serial number is valid and associated with this user."

I created MFA on the console for user1 and I tried getting the token on the CLI and it 
worked because the CLI was considering the default credentials belonging to user1. 

In-order to get the mfa token for user2, we need to create a user profile and assign 
values in: aws configure --profile "profilename" and use: aws sts--profile  "profilename" 
get-session-token......  to get the session token

AWS Limits, throttling, retries and exponential backoff  ---------------------------------------------
All API calls will have a limit/quota. (S3 get API call has 5500 requests per second limit)
One the limit is reached, a ThrottlingException is thrown. 
All SDK API calls have automatic retry if the ThrottlingException is thrown.
The limit is doubled on every retry and this is called throttling.

Chain ------------------------------------------------------------------------------------------------
Command line options -> environment vairables -> CLI credentials file -> CLI configuration file -> ECS container credentials -> instance profile credentials.
for java SDK - Environment Variables -> Java system properties -> default profile credentials -> ECS container credentials -> instance profile credentials.

Best Practise -----------------
If working within AWS environment - Use IAM roles and policies to provide access.
If working in an external environment - Use environment variables or user profiles.


Signed API requests, SigV4 ---------------------------------------------------------------------------
Used to sign HTTP API request to authenticate ourseld.
1) using header.
2) using query string (example - S3 signed URL)

###############################################################################################################################################################

Advance S3 and Athena ------------------------------------------------------------------------------

S3 MFA Delete - This can be done only using CLI. S3 versioning must be enabled in order to do this.
Need Root account access to enable S3 MFA Delete. Create root account credentials (It is a bad practise to have these credentials accessable.)
Need Root account arn. S3 MFA Delete can be enabled and disabled using CLI only.

S3 Default encryption is the modern way of ensuring encryption. 
Creating a S3 bucket policy that allows only https requests (blocks http requests) is the old way of doing things.
NOTE: Bucket policy is evaluated before default encryption. If bucket policy is set to AES256 encryption and if the default policy is 
set to AWS KMS. The traffic will be AES256 encrypted because bucket policy forms the outer layer and default policy will not encrypt 
the traffic that is already encrypted. 

S3 access logs and S3 Replication ------------------------------------------------------------------
Access logs and Replications must be configured in the main/monitor bucket.

S3 pre-signed URLs ---------------------------------------------------------------------------------

To get help about presigned url
cmd: aws s3 presign helps

To configure CLI default s3 signature to use Sigv4
cmd: aws configure set default.s3.signature_version s3v4

To get a presigned URL for a bucket resource
cmd: aws s3 presign s3://bucketNameOrPath/fileName --expires-in "time to expire" --region "region of the bucket" 

S3 storage classes ---------------------------------------------------------------------------------

S3 Lifecycle rules ---------------------------------------------------------------------------------
Transition and expiration action.

Baseline performance, KMS limit, multi-part upload, transfer acceleration, byte range fetch --------



S3 select and Glacier select -----------------------------------------------------------------------


Event notification ---------------------------------------------------------------------------------


Athena ---------------------------------------------------------------------------------------------


S3 Object lock, Glacier Vault Lock -----------------------------------------------------------------

###############################################################################################################################################################

CloudFront -----------------------------------------------------------------------------------------

CloudFront Origins ---------------------------------------------------------------------------------

CloudFront Geo Restrictions ------------------------------------------------------------------------

CloudFront vs Cross-Region-Replication -------------------------------------------------------------

CloudFront Caching ---------------------------------------------------------------------------------

CloudFront Security --------------------------------------------------------------------------------

CloudFront URL-Signing/Cookies ---------------------------------------------------------------------

###############################################################################################################################################################

ECS ------------------------------------------------------------------------------------------------
New section and tricky question.
Elastic Container Service - It provides Docker containers that wraps around an application to make it runable on any OS.
ECS - It is the Amazon's own platform to manage Docker Containers.

EC2 architecture vs Docker architecture ------------------------------------------------------------
EC2 - Infrastructures (Data Centres) -> Host OS -> Hypervisor -> Guest OS -> Apps
Docker - Infrastructures (Data Centres) -> Host OS -> Docker Deamon -> Containers

Docker Container Management and ECS Cluster --------------------------------------------------------
Dockerfile - It contains rules on how to create a Docker image.
Docker Image - Dockerfile is built to get a Docker Image. It is stored in public repo like Docker hub or private repo 
like Amazon ECR. They are pushed and pulled from the repo. 
Docker Container - Docker Image is run to create a Docker Container. It holds the application 
They ways to manage Docker Containers - ECS, EKS and Fargate

ECS Cluster is a group of EC2 instances that are logically bound.
EC2 instances run ECS Agent. ECS Agent is Docker Container. 
ECS Agent registers the EC2 instance in the Docker Cluster.
EC2 instance runs a special AMI made for ECS.

Creating ECS Cluster -------------------------------------------------------------------------------
When a ECS cluster is created, it creates an ASG that inturn creates the EC2 instance. The AMI used for creating the EC2 instance
is specifically made for ECS.
SSH into the instance using the public IP

cmd: cat /ec2/ecs/ecs.config 
Provides you the ECS configuration details. How instance knows to which cluster to connect to.

cmd: docker ps
It shows how EC2 is registered to ECS cluster. It is done using ECS agent(docker container).

cmd: docker logs "container ID"
Gives the log of the cluster

NOTE: security groups do not matter when an instance registers with the ECS service

ECS Task Definition and Tasks ----------------------------------------------------------------------
Yask Definition is a metadata in JSON form that tells ECS how to run a docker container.
host port is 8080
container port is 80
Tasks are created by ECS by consulting Task Definition (No of Tasks in Cluster = No of Docker containers)
To add additional ECS/EC2 instance, change desired capacity and max capacity of ASG and then update no of tasks in ECS Services

ECS Services and Load Balancer ---------------------------------------------------------------------
ECS Services tell how many tasks should run and how they should be run.
ECS Services holds information about how many containers to create and it consults ECS Tasks Definition to create tasks (Docker containers)
Deamon vs Replica - Replica allows you to define the number of tasks, Deamon has a fixed (1) no of tasks .
Dynamic Port forwarding - Does not have a fixed port and fowards the traffic to the instance accurately using ALB

To allow dynamic mapping of ports, ALB is required. 
A new ECS Services should be created to enable ALB because it must be enabled while creating the ECS services and can not be dont at a later time
Before creating new ECS Service, ALB must be created and ECS security group must be modified to listen to ALB only. 

ECR ------------------------------------------------------------------------------------------------
Get ECR password and use PIPE to pass it to the next command to login to ECR
cmd: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 689842674254.dkr.ecr.ap-south-1.amazonaws.com

Building Docker Image
docker build -t demo .

Tag the image and prepare it to be pushed to ECR repo
docker tag demo:latest "ECR Repo path"

Push the Docker Image to the ECR repo
docker push "ECR Repo path"

Fargate --------------------------------------------------------------------------------------------
Serverless ECS. No need to worry about scaling or creating EC2 instances.

ECS IAM Roles --------------------------------------------------------------------------------------
EC2 Instance Profile -> IAM Role for ECS Agent.
ECS Service, ECR Service and CloudWatch Logs

ECS Task Role -> IAM Role for Task Definition.
Use different roles for different ECS services.

Security Groups acts at instance level and not task level.

Task Placement Strategy and Constraint -------------------------------------------------------------
This is not applicable for Forgate as it is serverless. 

ECS Task Placement Strategy - BinPack, Random, Spread and Mixed.
ECS Task Placement Constraints - distinctInstance, memberOf

BinPack - Try to place all tasks in a single instance to minimize cost by reducing the usage of EC2 instances.
Random - Places the tasks randomnly
Spread - Places the tasks evenly through all the instance across AZs.
Mixed - Can use two different strategy to place tasks.

distinctInstance - Does not allow to place tasks of same type in the same instance. 
memberOf - Allows us to use certain metadata to place the tasks like saying all tasks
must be placed in t2.micro instance.

ECS Service Auto Scaling ---------------------------------------------------------------------------
ECS Service Auto Scaling is on the task level. It is used to scale tasks and it is to be paired with ECS Cluster Capacity Provider.
Auto Scaling Group can be managed in the ECS Services.
They can be done in 3 ways - target tracking, step scaling and scheduled scaling.

ECS Cluster Capacity Provider is used to scale ECS/EC2 instances.
ECS Cluster Capacity Provider hierarchy - 
Default capacity strategy is set when used does not define the strategy -> user defined capacity strategy
Capacity Provider are limited to 6. 
Fargate Capacity Provider can not be deleted and are created by AWS, we can also add our own provider though.

troubleshooting ------------------------------------------------------------------------------------
Unable to delete S3 instance after all the containers are deleted. This is because the S3 buckets have policies defined in them
that prevents us from hard deleting the S3 bucket. This throws an access denied error/permission error.
Solution: Delete the bucket policy to delete the bucket.

###############################################################################################################################################################

Elastic BeanStalk ----------------------------------------------------------------------------------
It is a PaaS, managed service, free by itself for use and pay for the resource usage.

3 types of architecture models - 
1) Single Instance - Beanstalk is run on a single EC2 instance. Suitable for development environment
2) LB + ASG - Run using a load balancer and an auto scaling group. Suitable for pre-production and production deployments
3) ASG only - Run using Auto Scaling Group, suitable for non-web applications

5 types of deployment modes - 
1) All at once - This type of deployment has a down time and will upload the latest version of application on all the servers
at once. Shortest deployment time. 
2) Rolling Deployment - This has down time for some instance, while few others are still running. Takes long time for deployment.
3) Rolling deployment with new batches - A given number (Batch number) of new EC2 instances are created with layesy version, the same 
number of servers are brought down and replaced with new version. Repeated till all older servers have new version of app. The newly
created servers are eliminated. At some point, both versions of the app will be running and will be over capacity with additional servers 
and will never under capacity through deployment. Longer deployment and good for production deployments.  
4) Immutable Deployment - This creates new ASG with new version of the app. Then murge the instances with the old ASG and will delete the
older ASG after successfuly moving the instances to older ASG. Longest Deployment but save with rollback feature. Good for production.
5) Blue Green Deployment - This creates new deployment environment with new version of the app. Certain percentage of traffic is diverted 
to new environment using Route 53 and weighted policy for testing. Roolback is also available in case of failures. And based on the 
performance, "swap URL" is used to swap the deployment.

Elastic BeanStalk CLI, Lifecycle Policy, Extensions ------------------------------------------------
It has a seperate EB CLI. Beanstalk deployment samples are provided by AWS - 
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/RelatedResources.html


Elastic BeanStalk vs CloudFormation ----------------------------------------------------------------
under the hood, Beanstalk runs using cloudformation. CloudFormation creates RC2, LB, ASG, SG, etc.
CloudFormation is very poerful and can be used to create any aws service.
 
Cloning, Migration, RDS Decoup;ing -----------------------------------------------------------------
BeanStalk can be clones using "URL Cloning". It clones all the features of an environment but does not 
replicate the data in a RDS but the configurations are cloned.

Migration is used because ELB can not be changed once created. To have a different type of ELB, we first
create the new environment with ALB and divert all the traffic from old environment to the new one. The traffic
diversion can be done using Route 53 or CNAME swap.

Beanstalk is coupled with RDS so if the environment is deleted, RDS and the data in it is also deleted.
To decouple RDS and Beanstalk, First take a snapshot for protection and create a new environment without RDS. Enable delete 
protection for RDS. Point the new environment to the old RDS using CNAME swap or Route 53 to divert all traffic and test 
for working. Delete the old environment(RDS is not deleted). 

Beanstalk with Docker/multi-docker -----------------------------------------------------------------

Beanstalk Https, web server vs worker environment, custom platform ---------------------------------

###############################################################################################################################################################

IAM ------------------------------------------------------------------------------------------------
EC2 ------------------------------------------------------------------------------------------------
Launching ------------------------------------------------------------------------------------------
Private IP VS Public IP ----------------------------------------------------------------------------
Elastic IP -----------------------------------------------------------------------------------------
EC2 User Data --------------------------------------------------------------------------------------
Instance Launch Types ------------------------------------------------------------------------------
ENI - Elastic Network Interface --------------------------------------------------------------------
AMI - Amazon Machine Image -------------------------------------------------------------------------

Elastic Load Balancing -----------------------------------------------------------------------------
Types of LB ----------------------------------------------------------------------------------------
Load balancing stickiness --------------------------------------------------------------------------
Cross-Zone load balancing --------------------------------------------------------------------------
SNI - Server Name Identifier -----------------------------------------------------------------------
ELB Connection Draining ----------------------------------------------------------------------------
ASG - Auto Scaling Group ---------------------------------------------------------------------------
Scaling Cool Down ----------------------------------------------------------------------------------

EBS - Elastic Block Storage ------------------------------------------------------------------------
EBS Types ------------------------------------------------------------------------------------------
Instance Storage -----------------------------------------------------------------------------------
EFS - Elastic File System --------------------------------------------------------------------------

RDS - Relational Database Service ------------------------------------------------------------------
RDS advantages over DB deployed on EC2--------------------------------------------------------------
RDS Features ---------------------------------------------------------------------------------------
RDS Automatic Backup -------------------------------------------------------------------------------
Snapshots ------------------------------------------------------------------------------------------
Read Replicas --------------------------------------------------------------------------------------
Multi AZ -------------------------------------------------------------------------------------------
RDS Security ---------------------------------------------------------------------------------------
IAM Authentication ---------------------------------------------------------------------------------
Aurora ---------------------------------------------------------------------------------------------
Security -------------------------------------------------------------------------------------------
Aurora Serverless ----------------------------------------------------------------------------------
Global Aurora --------------------------------------------------------------------------------------
ElasticCache ---------------------------------------------------------------------------------------
Redis ----------------------------------------------------------------------------------------------
Memcached ------------------------------------------------------------------------------------------
Lazy loading and Write-Through ---------------------------------------------------------------------
Cache Evictions and TTL - Time To Live -------------------------------------------------------------

Route 53 -------------------------------------------------------------------------------------------
Types of routing policies: -------------------------------------------------------------------------

VPC ------------------------------------------------------------------------------------------------
Security -------------------------------------------------------------------------------------------
VPS Flow Logs --------------------------------------------------------------------------------------
VPC Peering ----------------------------------------------------------------------------------------
VPC Endpoint ---------------------------------------------------------------------------------------
Site-to-Site VPN and Direct Connect ----------------------------------------------------------------

S3 -------------------------------------------------------------------------------------------------
Types of Encryption --------------------------------------------------------------------------------
S3 Security ----------------------------------------------------------------------------------------
CORS -----------------------------------------------------------------------------------------------
S3 Consistency -------------------------------------------------------------------------------------

AWS CLI, SDK, IAM roles and policies ---------------------------------------------------------------
AWS initial configuration --------------------------------------------------------------------------
CLI on EC2 instance to manage S3 -------------------------------------------------------------------
AWS dry run, sts decoder, instance metadata --------------------------------------------------------
AWS CLI Profile, MFA, SDK  -------------------------------------------------------------------------
DEBUGGING (MFA error not discussed in the course) --------------------------------------------------

Advance S3 and Athena ------------------------------------------------------------------------------
S3 access logs and S3 Replication ------------------------------------------------------------------
S3 pre-signed URLs ---------------------------------------------------------------------------------
S3 storage classes ---------------------------------------------------------------------------------
S3 Lifecycle rules ---------------------------------------------------------------------------------
Baseline performance, KMS limit, multi-part upload, transfer acceleration, byte range fetch --------
S3 select and Glacier select -----------------------------------------------------------------------
Event notification ---------------------------------------------------------------------------------
Athena ---------------------------------------------------------------------------------------------
S3 Object lock, Glacier Vault Lock -----------------------------------------------------------------

CloudFront -----------------------------------------------------------------------------------------
CloudFront Origins ---------------------------------------------------------------------------------
CloudFront Geo Restrictions ------------------------------------------------------------------------
CloudFront vs Cross-Region-Replication -------------------------------------------------------------
CloudFront Caching ---------------------------------------------------------------------------------
CloudFront Security --------------------------------------------------------------------------------
CloudFront URL-Signing/Cookies ---------------------------------------------------------------------


ECS ------------------------------------------------------------------------------------------------
EC2 architecture vs Docker architecture ------------------------------------------------------------
Docker Container Management and ECS Cluster --------------------------------------------------------
Creating ECS Cluster -------------------------------------------------------------------------------
ECS Task Definition and Tasks ----------------------------------------------------------------------
ECS Services and Load Balancer ---------------------------------------------------------------------
ECR ------------------------------------------------------------------------------------------------
Fargate --------------------------------------------------------------------------------------------
ECS IAM Roles --------------------------------------------------------------------------------------
Task Placement Strategy and Constraint -------------------------------------------------------------
ECS Service Auto Scaling ---------------------------------------------------------------------------

###############################################################################################################################################################

EC2 User Data ----------------------------------------------------------
#!/bin/bash
yum update -y
yum install -y httpd.x86_64
systemctl start httpd.service
systemctl enable httpd.service
EC2_AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
echo "<h1>Hello Arvind $(hostname -f) in AZ $EC2_AZ </h1>" > var/www/html/index.html

###############################################################################################################################################################

AKIA2BHOT3JHA4UT5UWP

FA2C17JuAxn5O7C0k49HOKeSlxtFfsEhaxM/RGcL

AWS Learning path
https://www.aws.training/LearningLibrary?search=&filters=classification%3A27&filters=language%3A1&tab=&sc_channel=em&sc_campaign=GLOBAL_CT_NL_global-snapshot-newsletter_20200812_&sc_medium=em_283216&sc_content=PA_nl_la&sc_geo=mult&sc_country=global&sc_outcome=pa&trk=em_283216_()_Velocity_Training_Security_Identity&Compliance_1&mkt_tok=eyJpIjoiWldZd01tSXhPVEpqTUdJMiIsInQiOiJEa21TUEw3Q0pvT2pXd1EwUGk5OXJsclZSMFFNUnorampCMzlGNGhwejllQVVjY2x5ZnQzUUR6T25YTnltMFwvbkRCMFBsWHA5YzNDRjBBRzg1eGMwelh0cnM0XC9lUTJQdTNackJya2JXXC9NbVNkMFU4aTVoRHZTcHBBZmZmXC9EWXJUaUU5SVI4R2ZQNHVlZzY1dWpPMEhBPT0ifQ%3D%3D






